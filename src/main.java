import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

/**
 * Created by Rael on 09.11.2015.
 */
public class main {

    /* TODO:
    1) Wczytaæ resztê macierzy
    2) Spróbowaæ zaadaptowaæ Strassen
    3) Porównaæ wyniki dla ró¿nej iloœci w¹tków
    4) Wyczyœciæ kod

    */


    static ArrayList<ArrayList<Double>> MatrixToArrayList(double[][] mat)
    {
        ArrayList<ArrayList<Double>> res = new ArrayList<ArrayList<Double>>();
        for(int i = 0; i < mat.length; i++)
        {
            ArrayList<Double> line = new ArrayList<Double>();
            for(int j = 0; j < mat[0].length; j++)
            {
                line.add(mat[i][j]);
            }
            res.add(line);
        }
        return res;
    }

        static ArrayList<ArrayList<ArrayList<Double>>> read(String filename) {

            ArrayList<ArrayList<ArrayList<Double>>> matrices = new ArrayList<ArrayList<ArrayList<Double>>>();

                String thisLine;

                try {
                    BufferedReader br = new BufferedReader(new FileReader(filename));
                    // Begin reading A
                    ArrayList<ArrayList<Double>> tmp = new ArrayList<ArrayList<Double>>();
                    while ((thisLine = br.readLine()) != null) {
                        if (thisLine.trim().equals("")) {
                            matrices.add(tmp);
                            tmp = new ArrayList<ArrayList<Double>>();
                            continue;
                        }
                        else if (thisLine.trim().equals("EOF"))
                        {
                            break;
                        }
                        else {
                            ArrayList<Double> line = new ArrayList<Double>();
                            String[] lineArray = thisLine.split(";");
                            for (String number : lineArray) {
                                line.add(Double.parseDouble(number));
                            }
                           tmp.add(line);
                        }
                    }



                    br.close();
                } catch (IOException e) {
                    System.err.println("Error: " + e);
                }

               // List<ArrayList<ArrayList<Integer>>> res = new LinkedList<ArrayList<ArrayList<Integer>>>();

                return matrices;
            }



            public static ArrayList<ArrayList<Double>> parallelMult(ArrayList<ArrayList<Double>> A,
                                                  ArrayList<ArrayList<Double>> B, int threadNumber) {
                double[][] C = new double[A.size()][B.get(0).size()];
                ExecutorService executor = Executors.newFixedThreadPool(threadNumber);
                List<Future<double[][]>> list = new ArrayList<Future<double[][]>>();
                int part = A.size() / threadNumber;
                if (part < 1) {
                    part = 1;
                }
                for (int i = 0; i < A.size(); i += part) {
                    System.err.println(i);
                    Callable<double[][]> worker = new Mult(A, B, i, i+part);
                    Future<double[][]> submit = executor.submit(worker);
                    list.add(submit);
                }

                // now retrieve the result
                int start = 0;
                double CF[][];
                for (Future<double[][]> future : list) {
                    try {
                        CF = future.get();
                        for (int i=start; i < start+part; i += 1) {
                            C[i] = CF[i];
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } catch (ExecutionException e) {
                        e.printStackTrace();
                    }
                    start+=part;
                }
                executor.shutdown();

                return MatrixToArrayList(C);
            }



    static void printMatrix(ArrayList<ArrayList<Double>> matrix) {
        for (ArrayList<Double> line : matrix) {
            int i = 0;
            StringBuilder sb = new StringBuilder(matrix.size());
            for (double number : line) {
                if (i != 0) {
                    sb.append("\t");
                } else {
                    i++;
                }
                sb.append(number);
            }
            System.out.println(sb.toString());
        }
    }

            public static void main(String[] args) {

                double Ax[][] = {
                        {0.1, 0.4, 0.5, 0.3, 0.0, 0.8, 0.7, 0.6, 0.8, 0.5, 0.4, 0.6, 0.2, 0.4, 0.9, 0.4, 0.8, 0.8, 0.9, 0.3, 0.4, 0.5, 0.7, 0.3, 0.5, 1.0, 0.9, 0.8, 0.8, 0.1, 0.3, 0.8, 0.9, 0.4, 0.2, 0.8, 0.4, 0.3, 0.1, 0.6, 0.5, 0.4, 0.5, 0.9, 0.2, 0.4, 0.8, 0.7, 0.0, 0.4},
                        {0.7, 0.6, 0.7, 0.8, 0.5, 0.2, 0.6, 0.6, 0.4, 1.0, 0.1, 0.5, 0.0, 0.1, 0.9, 1.0, 0.1, 0.6, 1.0, 0.1, 1.0, 0.8, 0.4, 0.6, 0.9, 0.7, 0.4, 0.2, 0.7, 0.7, 0.9, 0.1, 1.0, 0.9, 0.1, 0.3, 0.7, 0.8, 0.7, 0.8, 0.1, 0.0, 0.7, 0.4, 0.3, 0.4, 0.6, 1.0, 0.2, 0.8},
                        {0.2, 0.5, 0.3, 0.4, 0.2, 0.2, 0.8, 0.7, 0.2, 0.8, 0.8, 0.3, 0.5, 0.7, 0.8, 0.1, 0.1, 0.2, 0.8, 0.0, 0.4, 0.6, 0.1, 0.2, 0.6, 0.4, 0.3, 0.5, 0.9, 0.5, 0.0, 0.4, 0.5, 0.9, 0.8, 0.2, 0.6, 0.9, 0.8, 0.7, 0.1, 0.8, 0.7, 0.2, 0.2, 0.7, 1.0, 0.2, 0.8, 0.0},
                        {0.7, 0.7, 0.6, 0.5, 0.2, 0.6, 0.6, 0.4, 0.7, 0.9, 0.6, 0.1, 0.3, 0.6, 0.6, 0.7, 0.4, 0.1, 0.8, 0.3, 0.9, 0.3, 0.8, 0.3, 0.0, 0.8, 0.3, 0.4, 0.1, 0.8, 0.2, 0.7, 0.1, 0.9, 0.5, 0.2, 0.3, 0.2, 0.9, 0.8, 0.8, 0.2, 0.1, 0.6, 0.7, 0.3, 0.7, 0.3, 0.6, 0.5},
                        {0.8, 0.4, 0.8, 0.5, 0.2, 0.2, 0.7, 0.0, 0.8, 0.4, 0.7, 0.4, 0.2, 0.5, 0.6, 0.3, 0.2, 0.9, 0.5, 0.6, 0.4, 0.1, 0.1, 0.4, 0.8, 0.3, 0.7, 0.8, 0.2, 0.4, 0.2, 0.4, 0.2, 0.5, 1.0, 0.4, 0.9, 0.6, 0.7, 1.0, 0.8, 1.0, 0.7, 0.7, 0.6, 0.6, 0.2, 0.3, 0.8, 0.7},
                        {0.4, 0.5, 0.4, 0.9, 0.3, 0.2, 0.6, 0.3, 0.4, 0.7, 0.4, 0.2, 0.8, 0.6, 0.6, 0.7, 0.7, 0.6, 0.9, 0.8, 0.6, 0.7, 0.8, 0.5, 0.6, 0.5, 0.4, 0.4, 0.6, 0.3, 1.0, 0.9, 0.4, 0.8, 0.5, 0.7, 1.0, 0.5, 0.3, 0.8, 0.8, 0.4, 0.6, 0.3, 0.6, 0.0, 0.7, 0.5, 0.8, 0.6},
                        {1.0, 0.2, 0.3, 0.6, 0.7, 0.1, 0.1, 0.1, 0.2, 0.6, 1.0, 0.5, 0.6, 0.9, 0.4, 0.5, 1.0, 0.3, 0.8, 0.5, 0.9, 0.2, 0.5, 0.4, 0.6, 0.5, 0.4, 0.3, 0.7, 0.2, 0.6, 0.3, 0.7, 0.6, 0.8, 0.9, 0.9, 0.6, 0.6, 0.9, 0.3, 0.0, 0.3, 0.0, 0.2, 0.8, 0.6, 0.8, 0.8, 0.8},
                        {0.5, 0.6, 0.4, 0.9, 0.2, 0.3, 1.0, 0.6, 0.1, 1.0, 0.4, 0.4, 0.4, 0.8, 0.2, 0.7, 0.1, 0.5, 0.5, 0.9, 0.8, 0.7, 0.2, 0.5, 0.4, 0.9, 0.6, 0.5, 0.2, 0.0, 0.7, 0.5, 0.4, 0.7, 0.4, 0.0, 0.8, 0.5, 0.1, 0.9, 0.2, 0.3, 0.3, 0.2, 0.7, 0.3, 0.9, 0.9, 0.5, 0.5},
                        {0.8, 0.8, 0.4, 0.0, 0.5, 0.4, 0.4, 0.5, 0.0, 1.0, 0.2, 1.0, 0.2, 0.7, 1.0, 0.2, 0.9, 0.4, 0.7, 0.9, 0.4, 0.7, 0.4, 0.1, 0.7, 0.3, 0.1, 0.2, 0.5, 0.3, 0.9, 0.1, 0.4, 0.6, 1.0, 0.3, 0.3, 0.9, 0.7, 0.7, 0.6, 0.6, 0.5, 0.2, 0.2, 0.2, 0.1, 0.3, 0.9, 0.9},
                        {0.3, 0.8, 0.3, 0.9, 0.3, 1.0, 0.3, 0.3, 0.3, 0.2, 0.3, 0.2, 0.7, 0.5, 0.7, 0.1, 0.9, 0.1, 0.5, 0.8, 0.1, 0.2, 0.4, 1.0, 0.8, 0.3, 0.0, 0.1, 0.7, 0.7, 0.9, 0.2, 0.7, 0.3, 0.1, 0.6, 0.0, 0.5, 0.3, 0.7, 1.0, 0.2, 0.2, 0.1, 0.8, 1.0, 0.8, 0.8, 0.9, 0.1},
                        {0.4, 0.7, 0.6, 0.1, 0.7, 0.2, 0.7, 0.5, 0.0, 0.9, 0.6, 0.3, 0.3, 0.1, 0.8, 0.9, 0.7, 0.7, 0.9, 0.4, 0.2, 0.9, 0.8, 0.6, 0.6, 0.2, 0.4, 0.7, 0.7, 1.0, 0.7, 0.1, 0.9, 1.0, 0.7, 0.6, 0.8, 0.3, 0.0, 0.1, 0.2, 0.2, 0.2, 0.4, 0.8, 0.2, 0.2, 0.8, 0.7, 0.7},
                        {0.2, 0.8, 1.0, 0.6, 0.9, 0.2, 0.3, 0.7, 0.4, 0.1, 0.1, 0.9, 0.9, 0.9, 0.7, 0.3, 0.4, 0.9, 0.4, 0.1, 0.8, 0.9, 0.3, 0.1, 0.2, 0.3, 0.6, 0.7, 0.4, 0.8, 0.7, 0.0, 0.7, 0.2, 0.4, 0.4, 0.9, 0.8, 0.7, 0.6, 0.9, 0.0, 0.7, 0.6, 0.0, 0.1, 0.6, 0.1, 0.8, 0.9},
                        {0.6, 0.3, 0.1, 0.3, 0.3, 0.3, 0.7, 0.2, 0.4, 0.5, 1.0, 0.4, 0.9, 0.3, 0.2, 0.8, 0.6, 0.1, 0.7, 0.9, 0.8, 0.0, 0.3, 0.0, 0.2, 0.6, 0.9, 0.9, 0.1, 0.2, 0.1, 0.5, 0.9, 0.1, 0.1, 0.9, 0.5, 0.8, 0.4, 0.1, 1.0, 0.1, 0.7, 0.4, 0.1, 0.9, 0.8, 0.6, 0.5, 0.0},
                        {0.1, 0.8, 0.4, 0.1, 0.6, 0.8, 0.9, 0.2, 0.4, 0.4, 0.9, 0.3, 0.2, 0.4, 0.9, 0.1, 0.6, 0.1, 0.7, 0.0, 0.9, 0.9, 0.8, 0.8, 0.8, 0.9, 0.4, 0.9, 0.4, 0.7, 0.4, 0.1, 0.3, 0.7, 0.6, 0.7, 0.7, 0.9, 0.1, 0.3, 0.1, 0.8, 0.2, 0.2, 0.6, 0.9, 0.3, 0.9, 0.7, 0.6},
                        {1.0, 0.8, 1.0, 0.3, 0.9, 0.2, 0.7, 0.9, 0.9, 0.2, 1.0, 0.9, 0.2, 0.8, 0.3, 0.4, 0.2, 0.3, 0.4, 0.6, 0.9, 0.9, 0.7, 0.2, 0.4, 0.1, 0.3, 0.9, 0.4, 0.6, 1.0, 0.9, 1.0, 0.9, 0.1, 0.3, 0.1, 1.0, 0.5, 0.8, 0.1, 0.2, 0.4, 0.3, 0.2, 0.0, 0.7, 0.7, 0.9, 0.7},
                        {0.0, 0.3, 0.8, 0.1, 0.4, 0.4, 0.4, 0.9, 0.1, 0.6, 0.6, 0.4, 0.3, 0.7, 0.7, 0.4, 0.8, 0.2, 0.5, 0.8, 0.1, 0.8, 0.8, 0.6, 0.1, 0.2, 0.6, 0.1, 0.5, 0.8, 0.9, 0.5, 1.0, 1.0, 0.5, 0.5, 0.0, 1.0, 0.8, 0.8, 0.1, 0.9, 0.5, 0.2, 0.4, 0.2, 0.6, 0.9, 0.8, 0.2},
                        {0.0, 0.3, 0.3, 1.0, 0.2, 0.4, 0.4, 0.0, 0.5, 1.0, 0.7, 0.3, 0.1, 0.8, 0.9, 0.8, 1.0, 0.9, 0.5, 0.7, 0.3, 0.3, 0.7, 0.2, 0.8, 0.4, 0.8, 0.0, 0.8, 0.4, 0.6, 0.6, 0.5, 0.4, 0.6, 0.8, 0.2, 0.2, 0.9, 0.4, 0.3, 0.2, 0.3, 0.6, 1.0, 0.7, 0.6, 0.4, 0.2, 0.4},
                        {0.8, 0.6, 0.5, 0.8, 0.4, 0.6, 0.6, 0.8, 0.3, 0.8, 0.8, 0.2, 0.4, 0.5, 0.6, 0.9, 0.6, 0.9, 0.8, 0.7, 0.0, 0.6, 0.9, 0.6, 0.3, 0.8, 0.1, 0.4, 0.2, 0.6, 0.2, 0.1, 0.2, 0.8, 0.4, 0.6, 0.1, 0.8, 0.3, 0.2, 0.8, 0.8, 0.4, 0.8, 0.3, 0.3, 0.7, 0.1, 0.5, 0.1},
                        {0.3, 0.0, 0.2, 0.6, 0.7, 0.4, 0.9, 1.0, 0.7, 0.6, 0.7, 0.5, 0.4, 0.5, 1.0, 0.1, 0.9, 0.1, 0.9, 0.5, 0.2, 0.9, 0.1, 1.0, 0.7, 0.6, 0.5, 0.4, 0.8, 0.3, 0.7, 0.7, 0.1, 0.5, 0.7, 0.1, 0.5, 0.7, 0.4, 0.7, 0.6, 0.8, 0.4, 0.7, 0.9, 0.9, 0.2, 0.9, 1.0, 0.7},
                        {0.5, 0.6, 0.8, 0.2, 0.8, 0.1, 0.3, 0.3, 0.9, 1.0, 0.5, 0.4, 0.9, 0.7, 0.3, 0.5, 0.3, 0.8, 0.8, 0.9, 0.4, 0.0, 0.4, 0.2, 0.7, 0.5, 0.2, 0.4, 0.3, 0.0, 0.4, 0.7, 0.6, 0.5, 1.0, 0.0, 0.6, 0.3, 0.5, 0.9, 0.1, 0.2, 0.1, 0.4, 0.5, 0.1, 0.8, 0.9, 0.7, 0.8},
                        {0.1, 0.7, 0.7, 0.5, 0.9, 0.9, 0.6, 0.2, 0.4, 0.5, 0.7, 0.8, 0.4, 0.1, 0.7, 0.8, 0.8, 0.2, 0.1, 0.6, 0.2, 0.0, 0.4, 0.2, 0.8, 0.3, 0.6, 0.6, 0.6, 0.4, 0.9, 0.2, 0.9, 0.4, 0.8, 0.4, 0.5, 0.0, 0.1, 0.5, 0.0, 0.8, 0.2, 0.7, 0.2, 1.0, 0.4, 0.7, 0.2, 0.2},
                        {0.2, 0.9, 0.1, 0.1, 1.0, 0.3, 0.2, 0.7, 0.6, 0.7, 0.9, 0.1, 0.6, 0.1, 0.4, 0.8, 0.1, 0.3, 0.4, 0.0, 0.9, 0.1, 0.7, 0.6, 0.2, 0.3, 0.0, 0.0, 0.5, 0.6, 0.3, 0.2, 0.0, 0.3, 0.0, 0.0, 0.8, 0.4, 0.8, 0.8, 0.4, 0.7, 0.0, 0.9, 0.3, 0.6, 0.1, 0.5, 0.2, 0.3},
                        {0.7, 0.9, 0.0, 1.0, 0.2, 0.9, 0.4, 0.5, 0.6, 0.0, 0.1, 0.7, 0.5, 0.5, 0.9, 0.6, 0.3, 0.1, 0.3, 0.2, 0.8, 0.5, 0.0, 0.8, 0.3, 0.1, 0.7, 0.5, 0.9, 0.9, 0.5, 0.5, 0.5, 0.8, 0.1, 0.4, 0.8, 0.3, 0.8, 0.8, 0.7, 0.2, 0.5, 0.1, 0.3, 0.4, 0.2, 0.7, 1.0, 0.6},
                        {0.4, 0.4, 0.0, 0.5, 0.1, 0.9, 0.8, 0.3, 0.7, 0.6, 0.2, 0.3, 0.0, 0.5, 0.1, 0.8, 0.2, 0.3, 0.8, 0.9, 0.4, 0.8, 0.7, 0.4, 0.8, 0.6, 0.3, 0.9, 0.3, 0.8, 0.9, 0.1, 0.2, 0.0, 0.0, 0.8, 0.7, 1.0, 0.5, 0.2, 0.3, 0.2, 0.5, 0.3, 0.3, 0.5, 0.1, 0.8, 0.4, 0.4},
                        {0.3, 0.5, 0.3, 0.4, 0.7, 0.4, 0.6, 0.2, 0.9, 0.7, 0.7, 0.5, 0.5, 0.5, 0.0, 0.1, 0.7, 0.8, 0.0, 0.4, 0.7, 0.2, 0.2, 0.5, 0.1, 0.3, 0.0, 0.2, 0.5, 0.9, 0.8, 0.9, 0.2, 0.1, 0.5, 0.7, 0.3, 0.9, 0.4, 0.1, 0.9, 0.4, 0.4, 0.4, 0.2, 0.8, 0.8, 0.9, 0.4, 0.2},
                        {0.1, 0.3, 0.1, 0.8, 0.7, 0.6, 0.1, 0.7, 0.3, 0.8, 0.2, 0.0, 0.2, 0.7, 0.7, 0.3, 0.5, 0.6, 0.0, 0.4, 0.1, 0.5, 0.3, 0.1, 1.0, 0.6, 1.0, 0.9, 0.9, 0.4, 0.8, 0.3, 0.7, 0.5, 0.4, 1.0, 0.1, 0.9, 0.6, 0.5, 0.7, 0.6, 0.3, 0.4, 0.2, 0.9, 0.6, 0.8, 0.9, 0.0},
                        {0.4, 0.6, 0.6, 0.2, 0.8, 0.0, 0.9, 0.7, 0.8, 0.7, 0.5, 0.6, 0.2, 0.5, 0.0, 0.1, 0.8, 0.3, 0.2, 0.4, 0.3, 0.2, 0.0, 0.1, 0.6, 0.9, 0.2, 0.7, 0.4, 0.8, 0.3, 0.4, 0.2, 0.5, 0.5, 0.1, 0.1, 0.5, 0.4, 0.1, 0.1, 1.0, 0.2, 0.9, 0.4, 0.4, 0.5, 0.6, 0.6, 0.3},
                        {0.7, 0.1, 0.0, 1.0, 0.1, 0.5, 0.1, 0.3, 0.6, 0.3, 1.0, 0.2, 0.1, 0.3, 0.7, 0.9, 0.3, 0.4, 0.3, 0.3, 0.2, 0.3, 0.8, 0.0, 0.8, 0.4, 0.1, 0.3, 0.1, 0.1, 0.5, 1.0, 0.8, 0.3, 0.1, 0.1, 0.8, 0.8, 0.8, 0.5, 0.0, 0.9, 0.2, 0.9, 0.6, 0.0, 0.9, 0.6, 0.3, 0.6},
                        {0.5, 0.2, 0.1, 0.8, 1.0, 0.1, 0.8, 0.3, 0.4, 0.3, 0.3, 0.9, 1.0, 0.3, 1.0, 0.7, 1.0, 0.3, 0.3, 0.3, 0.1, 0.5, 0.4, 0.6, 0.4, 0.5, 0.8, 0.3, 0.8, 0.1, 0.6, 0.1, 0.5, 0.5, 0.7, 0.8, 0.2, 0.6, 0.0, 0.3, 0.2, 0.0, 0.9, 0.9, 0.7, 0.0, 0.5, 0.5, 0.4, 0.8},
                        {0.9, 0.2, 0.2, 0.8, 0.8, 0.8, 0.0, 0.1, 0.9, 0.1, 0.9, 0.2, 0.5, 0.1, 0.2, 0.4, 0.1, 0.7, 0.2, 0.8, 0.8, 0.7, 0.3, 0.1, 1.0, 0.4, 0.5, 0.2, 0.4, 0.5, 0.7, 0.7, 0.5, 0.0, 0.3, 0.8, 0.5, 0.2, 0.0, 0.2, 0.1, 0.7, 1.0, 0.5, 0.8, 0.0, 0.6, 0.6, 0.8, 0.3}
                };

                double Bx[][] = {
                        {0.7, 0.7, 0.7, 0.5, 0.3, 0.7, 0.6, 0.4, 0.3, 1.0, 0.6, 0.6, 0.9},
                        {0.9, 0.9, 0.2, 0.1, 0.3, 0.7, 0.2, 0.6, 0.8, 0.2, 0.1, 0.3, 0.2},
                        {0.1, 0.1, 0.9, 0.7, 0.7, 0.5, 0.2, 0.3, 0.5, 0.2, 0.7, 0.4, 0.6},
                        {0.9, 0.6, 0.6, 0.2, 0.5, 0.1, 0.9, 0.9, 1.0, 0.5, 0.5, 0.1, 0.4},
                        {0.4, 0.8, 0.8, 1.0, 0.8, 0.4, 0.0, 1.0, 0.8, 0.9, 0.2, 0.5, 0.2},
                        {0.9, 0.5, 0.5, 0.7, 0.1, 1.0, 0.1, 0.2, 0.6, 0.4, 0.5, 0.6, 0.8},
                        {0.3, 0.4, 0.3, 0.5, 0.9, 0.1, 0.9, 0.8, 0.9, 0.9, 0.3, 0.0, 0.3},
                        {0.0, 0.1, 0.1, 0.7, 0.6, 0.2, 0.8, 0.4, 0.0, 0.8, 0.3, 0.3, 1.0},
                        {0.3, 1.0, 0.4, 0.6, 0.1, 0.2, 0.2, 0.7, 0.5, 0.4, 0.2, 0.4, 0.5},
                        {0.0, 0.4, 0.3, 1.0, 0.8, 0.7, 0.4, 0.8, 0.1, 0.0, 0.3, 0.8, 0.1},
                        {0.8, 0.2, 0.8, 0.2, 0.7, 0.8, 0.8, 0.4, 0.1, 0.5, 0.4, 0.8, 0.5},
                        {0.8, 0.7, 0.9, 0.0, 0.7, 0.0, 0.4, 0.7, 1.0, 0.1, 1.0, 0.4, 0.8},
                        {0.8, 0.0, 0.2, 0.1, 0.3, 0.1, 0.7, 0.2, 0.9, 0.5, 0.7, 0.5, 0.4},
                        {1.0, 0.2, 0.2, 0.6, 0.8, 0.6, 0.3, 0.5, 0.9, 0.6, 0.5, 0.1, 0.3},
                        {0.3, 0.6, 0.7, 0.4, 0.4, 0.9, 0.6, 0.2, 0.9, 0.3, 0.7, 0.4, 0.3},
                        {0.6, 0.9, 0.6, 0.3, 0.6, 0.0, 0.2, 0.1, 1.0, 0.9, 1.0, 0.1, 0.2},
                        {0.9, 0.8, 0.8, 0.9, 0.9, 0.5, 0.9, 0.9, 0.2, 0.9, 0.3, 1.0, 0.8},
                        {0.1, 0.8, 0.6, 0.2, 0.8, 0.2, 0.6, 0.7, 1.0, 0.8, 1.0, 0.3, 0.8},
                        {0.8, 0.9, 0.9, 0.6, 0.1, 0.6, 0.8, 0.7, 0.9, 0.1, 0.5, 0.1, 0.1},
                        {0.3, 0.6, 0.6, 0.5, 0.5, 0.0, 0.5, 0.3, 0.9, 0.1, 0.0, 0.9, 0.6},
                        {0.7, 0.3, 0.5, 0.5, 0.7, 0.2, 0.9, 0.6, 1.0, 0.1, 0.7, 0.2, 1.0},
                        {0.6, 0.6, 0.9, 0.7, 0.8, 0.1, 0.9, 0.4, 0.3, 0.3, 0.4, 0.8, 0.0},
                        {0.1, 0.9, 0.5, 0.0, 0.7, 0.9, 0.3, 0.9, 0.4, 0.1, 0.9, 0.8, 0.1},
                        {0.6, 0.3, 0.2, 0.3, 0.8, 0.4, 0.7, 0.1, 0.8, 0.2, 0.3, 0.4, 0.4},
                        {0.2, 0.2, 0.6, 0.2, 0.5, 0.2, 0.5, 1.0, 0.2, 0.1, 0.6, 0.2, 0.1},
                        {0.3, 0.1, 1.0, 0.3, 0.8, 0.8, 0.7, 0.4, 0.4, 0.7, 1.0, 0.1, 0.1},
                        {0.7, 0.2, 0.7, 0.7, 0.4, 0.8, 0.2, 0.1, 0.5, 0.6, 0.9, 0.7, 0.7},
                        {0.5, 0.6, 0.2, 0.6, 0.4, 0.6, 0.7, 0.3, 0.1, 0.9, 0.8, 0.1, 0.7},
                        {1.0, 0.6, 0.9, 0.8, 0.7, 0.2, 0.3, 0.1, 0.6, 0.9, 0.5, 0.9, 0.6},
                        {0.4, 0.6, 0.2, 0.4, 0.6, 0.7, 0.3, 0.7, 0.9, 0.5, 0.0, 0.6, 0.7},
                        {0.6, 0.1, 0.5, 0.7, 0.1, 0.9, 0.7, 0.8, 0.8, 0.7, 0.3, 0.0, 0.9},
                        {0.4, 0.8, 0.5, 0.9, 0.1, 0.5, 0.8, 0.9, 0.8, 1.0, 0.9, 0.2, 1.0},
                        {0.3, 0.3, 1.0, 1.0, 0.3, 0.9, 1.0, 0.1, 0.7, 0.4, 0.8, 0.1, 0.6},
                        {0.3, 0.8, 0.5, 0.3, 0.3, 0.1, 0.5, 0.6, 1.0, 0.9, 0.6, 0.2, 1.0},
                        {0.8, 0.5, 0.3, 0.1, 0.4, 0.6, 0.9, 0.1, 0.1, 0.8, 0.3, 0.9, 0.9},
                        {0.2, 0.9, 0.3, 0.5, 0.3, 0.5, 0.3, 0.5, 0.8, 0.6, 0.4, 0.3, 0.6},
                        {0.2, 0.3, 0.8, 0.9, 0.4, 0.7, 0.5, 0.1, 0.8, 0.3, 0.4, 0.1, 0.5},
                        {0.4, 0.7, 1.0, 0.2, 0.9, 0.3, 0.6, 0.8, 0.4, 0.9, 0.5, 0.8, 0.3},
                        {0.1, 0.4, 0.4, 0.4, 0.7, 0.3, 0.3, 0.6, 0.1, 0.1, 0.6, 0.6, 0.2},
                        {0.2, 0.1, 0.5, 0.5, 0.4, 0.3, 0.5, 0.7, 0.5, 0.3, 1.0, 0.9, 0.8},
                        {0.9, 0.4, 0.0, 0.8, 0.4, 0.7, 0.0, 0.5, 0.5, 0.9, 1.0, 0.3, 0.4},
                        {0.4, 0.9, 0.3, 0.7, 0.8, 0.5, 0.9, 0.4, 0.3, 0.8, 0.6, 0.7, 1.0},
                        {0.5, 1.0, 0.2, 0.1, 0.4, 0.6, 1.0, 0.4, 1.0, 0.7, 0.0, 0.5, 0.6},
                        {0.8, 0.5, 0.6, 1.0, 0.3, 0.5, 0.4, 0.3, 0.3, 0.4, 0.3, 0.6, 0.7},
                        {0.7, 0.8, 0.2, 0.2, 0.6, 0.3, 1.0, 0.2, 0.5, 0.9, 0.8, 0.9, 0.8},
                        {0.3, 0.3, 0.1, 0.6, 0.4, 0.1, 0.8, 0.1, 0.4, 0.5, 0.5, 0.1, 0.8},
                        {0.7, 0.1, 0.7, 0.8, 0.5, 0.3, 0.8, 0.9, 0.0, 0.3, 1.0, 0.3, 0.6},
                        {0.0, 0.6, 0.5, 0.9, 0.5, 0.2, 1.0, 1.0, 0.1, 0.1, 0.3, 0.3, 0.5},
                        {0.5, 0.7, 0.8, 0.5, 0.6, 0.2, 0.7, 0.8, 0.1, 0.0, 0.6, 0.7, 0.2},
                        {0.3, 0.6, 0.9, 0.3, 0.3, 0.5, 0.8, 0.0, 0.5, 0.6, 0.3, 0.3, 0.4}
                };


                String filename;
                int cores = Runtime.getRuntime().availableProcessors();


                int threads = 2;
                /*
                if (args.length < 3) {
                    filename = "3.in";
                    threads = cores;
                } else {
                    filename = args[1];
                    threads = Integer.parseInt(args[2]);
                }
                */
                filename = "D:\\mat.txt";
                List<ArrayList<ArrayList<Double>>> matrices = read(filename);
                ArrayList<ArrayList<Double>> C =  parallelMult(matrices.get(0), matrices.get(1), threads);
                /*
                for(int i = 2; i < 100; i++)
                {
                   C =  parallelMult(C, matrices.get(i), threads);
                }
                */
                //ArrayList<ArrayList<Integer>> A = matrices.get(0);
                //ArrayList<ArrayList<Integer>> B = matrices.get(1);

                printMatrix(C);
                ArrayList<ArrayList<Double>> Al = MatrixToArrayList(Ax);
                ArrayList<ArrayList<Double>> Bl = MatrixToArrayList(Bx);
                C = parallelMult(Al, Bl, threads);
                printMatrix(C);
            }
        }

        /*
        String Path = "C:\\sample-matrices.txt";
        BufferedReader br = null;
        String line =  "";
        String separator = ";";
        int max = 0;
        LinkedList<double [][]> Matrices;
        LinkedList<Double> row = new LinkedList<>();
        try {
                br = new BufferedReader(new FileReader(Path));
                double [][] tmpMat;
                while ((line = br.readLine()) != null) {
                    if(line.equals("\n")) {
                        //todo : start loading new matrix
                        continue;
                    }
                    String[] values = line.split(separator);
                    String[] trimmedArray = new String[values.length];
                    for (int i = 0; i <  values.length; i++) {
                        trimmedArray[i] = values[i].trim();
                    }

                    for(int i = 0; i < trimmedArray.length;i++) {
                        double tmp = Double.parseDouble(trimmedArray[i]);
                        row.add(tmp);
                    }

                  Double [] newRow = row.toArray(new Double[row.size()]);
                    tmpMat = new double [][]


                    // TODO : waga jest zmiennoprzecinkowa - > zmieniæ , sprawdziæ usuwanie bia³ych znaków

                    int v2 = Integer.parseInt(trimmedArray[1]);
                    if(v1 > max ) max = v1;
                    if(v2 > max ) max = v2;
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (br != null) {
                    try {
                        br.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            }
        }
        catch(Exception e)
        {

        }
    }*/



